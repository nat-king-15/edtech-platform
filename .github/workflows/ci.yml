name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  # Frontend Jobs
  frontend-lint:
    name: Frontend Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript
        run: npx tsc --noEmit

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next
          retention-days: 1

  # Backend Jobs
  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint (if configured)
        run: |
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
            npx eslint . --ext .js,.ts
          else
            echo "ESLint not configured, skipping..."
          fi
        continue-on-error: true

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379
          # Mock Firebase credentials for testing
          FIREBASE_PROJECT_ID: test-project
          FIREBASE_CLIENT_EMAIL: test@test.com
          FIREBASE_PRIVATE_KEY: test-key

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379
          FIREBASE_PROJECT_ID: test-project
          FIREBASE_CLIENT_EMAIL: test@test.com
          FIREBASE_PRIVATE_KEY: test-key

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
        continue-on-error: true

  # Security Scans
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js for security scan
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Frontend security scan
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Audit frontend dependencies
        run: |
          cd frontend
          npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk for frontend
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=frontend/package.json --severity-threshold=high

      # Backend security scan
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Audit backend dependencies
        run: |
          cd backend
          npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk for backend
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=backend/package.json --severity-threshold=high

  # Code Quality
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        run: |
          if [ -f "backend/Dockerfile" ]; then
            docker build -t edtech-backend:test ./backend
          else
            echo "Backend Dockerfile not found, skipping..."
          fi
        continue-on-error: true

      - name: Build frontend Docker image
        run: |
          if [ -f "frontend/Dockerfile" ]; then
            docker build -t edtech-frontend:test ./frontend
          else
            echo "Frontend Dockerfile not found, skipping..."
          fi
        continue-on-error: true

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-build]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Start backend server
        run: |
          cd backend
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 5000
          REDIS_URL: redis://localhost:6379
          FIREBASE_PROJECT_ID: test-project
          FIREBASE_CLIENT_EMAIL: test@test.com
          FIREBASE_PRIVATE_KEY: test-key

      - name: Run API health check
        run: |
          curl -f http://localhost:5000/health || exit 1

      - name: Run integration tests
        run: |
          cd backend
          if [ -f "tests/integration" ]; then
            npm test -- tests/integration
          else
            echo "No integration tests found, skipping..."
          fi
        continue-on-error: true

  # Deployment Readiness Check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [frontend-lint, frontend-build, backend-lint, backend-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check deployment files
        run: |
          echo "Checking deployment configuration..."
          
          # Check for required deployment files
          files_to_check=(
            "firebase.json"
            "backend/package.json"
            "frontend/package.json"
            "DEPLOYMENT_GUIDE.md"
          )
          
          for file in "${files_to_check[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file missing"
              exit 1
            fi
          done

      - name: Validate environment configuration
        run: |
          echo "Validating environment setup..."
          
          # Check for required environment variables documentation
          if grep -q "Environment Variables" DEPLOYMENT_GUIDE.md; then
            echo "✅ Environment variables documented"
          else
            echo "❌ Environment variables not documented"
            exit 1
          fi

      - name: Security checklist
        run: |
          echo "Running security checklist..."
          
          # Check for common security files
          security_files=(
            ".github/workflows/security-scan.yml"
            "backend/.gitignore"
            "frontend/.gitignore"
          )
          
          for file in "${security_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
            else
              echo "⚠️ $file missing (recommended)"
            fi
          done

      - name: Performance check
        run: |
          echo "Checking performance considerations..."
          
          # Check for performance-related configurations
          if [ -f "frontend/next.config.js" ] || [ -f "frontend/next.config.ts" ]; then
            echo "✅ Next.js configuration found"
          else
            echo "⚠️ Next.js configuration not found"
          fi

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deployment-check]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deployment-check.result == 'success'
        run: |
          echo "🎉 All CI checks passed! Ready for deployment."

      - name: Notify failure
        if: needs.deployment-check.result == 'failure'
        run: |
          echo "❌ CI checks failed. Please review the errors above."
          exit 1